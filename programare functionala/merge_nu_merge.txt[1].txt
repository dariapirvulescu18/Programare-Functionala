MERGE:
----------------------------------------------------------------------------------------------------
(head . tail) lista
head (tail lista)
head . tail $ lista
head $ tail lista
head $ tail $ lista
head $ zip [0,0.5..] [1,5..]
(head . zip [0,0.5..]) [1,5..]
map minimum [[1..10],[2..20],[3..50]] -- iti face ce crezi ca ar face (si maximum la fel)
f = abs. head . tail -------> daca faci f lista merge
take 5 $ foldr (:) [] [1..] = [1,2,3,4,5]
foldl (flip(:)) [1] [1, 2, 3] =  [3, 2, 1, 1];
:t map (++) ["ana", "are", "mere"] = map (++) ["ana", "are", "mere"] :: [[Char] -> [Char]]

DACA AI DE EX foo :: a -> (Int -> String) -> [Char]
		:t map foo =====> map foo :: [a] -> [(Int -> String) -> [Char]]
 
l = [k | x <- [1..10], let k = x + 1,  let y = k + 2 , mod y 2 == 0]

:t map ($) = map ($) :: [a -> b] -> [a -> b]
:t map ($ 3) = map ($ 3) :: Num a => [a -> b] -> [b]

(2^) (left section) is equivalent to (^) 2, or more verbosely \x -> 2 ^ x
(^2) (right section) is equivalent to flip (^) 2, or more verbosely \x -> x ^ 2

---------------------------------------------------------------------------------------------------
NU MERGE:
foldr (flip(:)) [1] [1, 2, 3] =  [3, 2, 1, 1];
head . tail lista
head tail lista
head zip l1 l2
SA AI VARIABILE CARE INCEP CU LITERA MARE
sa ai data cu litera mica (also, se scrie data Blablabla ...)
